{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Attendance and Employee Management API","text":"<p>This API serves as the backbone for managing employee attendance and information within our system. Built entirely using pure PHP and powered by an SQL database, this system follows a client-server architecture. The primary focus of this documentation is on the API aspect of the project.</p>"},{"location":"#architecture-and-structure","title":"Architecture and Structure","text":"<p>The project is organized into several distinct layers, each handling specific responsibilities:</p> <ul> <li>Service Layer: Utilizes the Eloquent ORM to interact with the database, providing clean and efficient data management.</li> <li>Model Layer: Represents database entities as PHP objects, leveraging the Eloquent ORM for database operations.</li> <li>Controller Layer: Handles incoming HTTP requests and dispatches them to the appropriate services. This layer is responsible for parsing the request and generating appropriate responses.</li> <li>Router Layer: Manages routing and URL parameter extraction, calling authorization middleware when necessary to secure endpoints.</li> </ul>"},{"location":"#server-and-hosting","title":"Server and Hosting","text":"<p>The API runs on an Apache HTTP server, which acts as the main request handler. The server leverages Apache\u2019s request call method to efficiently process incoming requests. The project is containerized using Docker, ensuring consistent and isolated environments. The Docker Compose setup includes two key containers:</p> <ul> <li>Apache HTTP Server: Hosts and serves the API, processing client requests.</li> <li>SQL Server: Manages the database that stores employee and attendance data.</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<p>Clean and Modular Design: Clearly separated layers for routing, request handling, service logic, and database interaction. Containerized Environment: Simplifies deployment and maintenance through Docker. Efficient Data Management: Uses Eloquent ORM to streamline data access and manipulation. Extensible Architecture: Easily add new features or extend existing functionality.</p>"},{"location":"api-documentation/","title":"Overview","text":"<p>The api is a centralized and contained system for managing the needs of a single client (business) , in the future we will be working towards making it into a full Saas where having a new user for the system requires that user to create an account rather than requiring the deployment of a new instance of the server to achieve it. We have in this system two entities, employees and attendances .</p>"},{"location":"api-documentation/#notes","title":"Notes","text":"<ul> <li>Notice that the update endpoints use <code>POST</code> method instead of <code>PATCH</code> or <code>PUT</code> and that is because of a 'flaw' in php as it is unable to automatically parse incoming request body when the method is other than <code>POST</code> , Laravel framework implemented a workaround this by using a <code>POST</code> request and using a magic string within the request body that specifies that it actually is a <code>PUT</code> request, click here for more info.</li> </ul>"},{"location":"api-documentation/#format-specification","title":"Format specification","text":"<p>All requests that have a body require a content-type of multipart/form-data , and the response of all requests (with or without a body) have content type application/json , if an endpoint doesn't follow this format then it will be specified. For the responses that are the same for all endpoints such as server errors <code>500</code> will not be specified here but rather in the exhaustive endpoints page here</p>"},{"location":"api-documentation/#employee-management","title":"Employee management","text":"<p>For the employees we have a list of endpoints here, and here we will provide the  workflow and details about the usage of these endpoints : </p>"},{"location":"api-documentation/#1-create-en-employee","title":"1. Create en employee","text":"<p>The first functionality we will see is that of employee creation :</p>"},{"location":"api-documentation/#endpoint","title":"Endpoint :","text":"<pre><code>POST /employee\n</code></pre>"},{"location":"api-documentation/#request-body","title":"Request body :","text":"<pre><code>name : String\nsalary : Float\n</code></pre>"},{"location":"api-documentation/#responses","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <pre><code>{\n\n    \"success\": true,\n\n    \"message\": \"Employee created successfully\"\n\n}\n</code></pre></li> <li>Validation Error <code>400 Bad Request</code></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#2-get-an-employee-by-id","title":"2. Get an employee by ID","text":""},{"location":"api-documentation/#endpoint_1","title":"Endpoint :","text":"<pre><code>GET /employee/{id}\n</code></pre>"},{"location":"api-documentation/#responses_1","title":"Responses :","text":"<ol> <li> <p>Success <code>200 OK</code> <pre><code>{\n\n\u00a0 \u00a0 \"success\": true,\n\n\u00a0 \u00a0 \"data\": {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"hydrion\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"salary\": 35000,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\n\u00a0 \u00a0 }\n\n}\n</code></pre></p> </li> <li> <p>Employee not found <code>404 Not Found</code> <pre><code>{\n\n\u00a0 \u00a0 \"success\": false,\n\n\u00a0 \u00a0 \"message\": \"Employee not found\"\n\n}\n</code></pre></p> </li> <li> <p>Server Error <code>500 Internal Server Error</code></p> </li> </ol>"},{"location":"api-documentation/#3-get-all-employees","title":"3. Get all employees","text":""},{"location":"api-documentation/#endpoint_2","title":"Endpoint :","text":"<pre><code>GET /employee\n</code></pre>"},{"location":"api-documentation/#responses_2","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <code>data</code> holds an array of employees <pre><code>{\n\n\u00a0 \u00a0 \"success\": true,\n\n\u00a0 \u00a0 \"data\": [\n\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"hydrion\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"salary\": 35000,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 2,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"sarpedon\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"salary\": 787878,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\u00a0 \u00a0 \u00a0 \u00a0 } ...\n            ]\n}\n</code></pre></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#4-update-an-employee","title":"4. Update an employee","text":""},{"location":"api-documentation/#endpoint_3","title":"Endpoint :","text":"<pre><code>POST /employee/{id}\n</code></pre>"},{"location":"api-documentation/#request-body_1","title":"Request body :","text":"<pre><code>name : String\nsalary : Float\n</code></pre>"},{"location":"api-documentation/#responses_3","title":"Responses :","text":"<ol> <li>Update Successful <code>200 OK</code> <pre><code>{\n\n\u00a0 \u00a0 \"success\": true,\n\n\u00a0 \u00a0 \"data\": {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"hydrion\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"salary\": \"35000\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\n\u00a0 \u00a0 }\n\n}\n</code></pre></li> <li>Employee not found <code>404  Not Found</code></li> <li>Server Error <code>500 Internal Server Error</code></li> <li>Validation Error <code>400 Bad Request</code></li> </ol>"},{"location":"api-documentation/#5-delete-an-employee","title":"5. Delete an employee","text":""},{"location":"api-documentation/#endpoint_4","title":"Endpoint :","text":"<pre><code>DELETE /employee/{id}\n</code></pre>"},{"location":"api-documentation/#responses_4","title":"Responses :","text":"<ol> <li>Delete Successful <code>200 OK</code> <pre><code>{\n\u00a0 \u00a0 \"success\": true,\n\u00a0 \u00a0 \"message\": \"Employee deleted successfully\"\n}\n</code></pre></li> <li>Employee not found <code>404  Not Found</code></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#attendance-management","title":"Attendance management","text":""},{"location":"api-documentation/#1-create-an-attendance","title":"1. Create an attendance","text":""},{"location":"api-documentation/#endpoint_5","title":"Endpoint :","text":"<pre><code>POST /attendance\n</code></pre>"},{"location":"api-documentation/#request-body_2","title":"Request body :","text":"<p><pre><code>date : Date (yyyy-mm-dd)\nemployee_id : Int\ncheck_in : Time (hh:mm:ss)\n</code></pre> - date : is the date for which the attendance entry is created for - employee_id : an integer that references the employee for which the entry is created - check_in :  the time of clock-in of the employee</p>"},{"location":"api-documentation/#responses_5","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <pre><code>{\n\n\u00a0 \u00a0 \"success\": true,\n\n\u00a0 \u00a0 \"data\": {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 31,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"attendance\": {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"date\": \"2025-03-02\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": \"3\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_in\": \"08:50:52\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 31\n\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\n\u00a0 \u00a0 }\n\n}\n</code></pre> the response contains a status field <code>success</code> and data which contains the created attendance entry and an <code>id</code> which is redundant and will be removed later</li> <li>Attendance already exists <code>409 Conflict</code> <pre><code>{\n\u00a0 \u00a0 \"success\": false,\n\u00a0 \u00a0 \"message\": \"Attendance already exists today\",\n\u00a0 \u00a0 \"data\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 31,\n\u00a0 \u00a0 \u00a0 \u00a0 \"attendance\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 31,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": 3,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"date\": \"2025-03-02\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_in\": \"08:50:52\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_out\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_start\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_end\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"last_action\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n}\n</code></pre> this response occurs in the case where the creation of an attendance entry is requested while there already is an entry corresponding to that employee and date given in the request's body, we get the attendance that causes the conflict in the response under : <code>data.attendance</code></li> <li>Validation Error <code>400 Bad Request</code></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#2-modify-an-attendance","title":"2. Modify an attendance","text":""},{"location":"api-documentation/#endpoint_6","title":"Endpoint :","text":"<pre><code>POST /attendance/{id}\n</code></pre>"},{"location":"api-documentation/#request-body_3","title":"Request body :","text":"<p><pre><code>field : Enum('check_in','check_out','break_start','break_end')\ntime : Time (hh:mm:ss)\n</code></pre> - field : the field which we want to modify  - time :  the time value to which we want the specified field to be set to</p>"},{"location":"api-documentation/#responses_6","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <pre><code>{\n\n\u00a0 \u00a0 \"success\": true,\n\n\u00a0 \u00a0 \"message\": \"Attendance updated successfully.\",\n\n\u00a0 \u00a0 \"data\": {\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"id\": 22,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": 3,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"date\": \"2025-02-24\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"check_in\": \"08:50:52\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"check_out\": \"17:0:00\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"break_start\": null,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"break_end\": null,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"last_action\": \"check_out\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\n\u00a0 \u00a0 }\n\n}\n</code></pre></li> <li>Attendance not found <code>404 Not Found</code></li> <li>Validation Error <code>400 Bad Request</code>     this could occur due to these reasons :<ul> <li>simple validation error : a field contains an invalid type or the <code>field</code> value is not one of <code>['check_in','check_out','break_start','break_end']</code> </li> <li>the request tried to set the value of a column to a chronologically invalid value, for example we have <code>check_in</code> set to : <code>09:02:12</code> and we try to set <code>break_start</code> to : <code>08:30:12</code> and this will trigger a bad request response</li> </ul> </li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#3-get-a-months-report","title":"3. Get a month's report","text":""},{"location":"api-documentation/#endpoint_7","title":"Endpoint :","text":"<p>this endpoint returns the month's history, worked and office days, plus the payment  <pre><code>GET /attendance/{emp_id}/month/{yyyy}-{mm}\n</code></pre> - <code>emp_id</code> : the id of the employee for which we want to generate the report for - <code>{yyyy}-{mm}</code> : a formatted string that contains the year and month, ex : 2025-02</p>"},{"location":"api-documentation/#responses_7","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <pre><code>{\n\u00a0 \u00a0 \"success\": true,\n\u00a0 \u00a0 \"data\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"workedDays\": 4,\n\u00a0 \u00a0 \u00a0 \u00a0 \"attendances\": [\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 13,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"date\": \"2025-02-01\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_in\": \"08:30:00\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_out\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_start\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_end\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"last_action\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ...\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ...\n\u00a0 \u00a0 \u00a0 \u00a0 ],\n\u00a0 \u00a0 \u00a0 \u00a0 \"officeDaysNumber\": 20,\n\u00a0 \u00a0 \u00a0 \u00a0 \"payement\": 7000\n\u00a0 \u00a0 }\n}\n</code></pre> <code>data</code> : inside this field we have :</li> <li><code>workedDays</code> : the number of days the employee has worked in the given month <code>{mm}</code> in the request params.</li> <li><code>attendances</code> : a list of all attendance records for the month.</li> <li><code>officeDaysNumber</code> : the number of office days for the month, they are calculated by subtracting the number of holidays and weekends from the total days of the month, the holidays' dates are obtained from google calendar</li> <li><code>payement</code> : is the total salary of that employee, obtained from the <code>workedDays</code> and the employee's <code>salary</code> field</li> <li>Employee Not Found <code>404 Not Found</code></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#4-get-the-attendance-of-a-certain-day","title":"4. Get the attendance of a certain day","text":""},{"location":"api-documentation/#endpoint_8","title":"Endpoint :","text":"<p>this endpoint returns the attendance entry specific to an employee for a specified date <pre><code>GET /attendance/{emp_id}/day/{yyyy}-{mm}-{dd}\n</code></pre> - <code>emp_id</code> : the id of the employee for which we want to get the attendance - <code>{yyyy}-{mm}</code>-{dd} : a formatted string that contains the date of the attendance, ex : 2025-02-01</p>"},{"location":"api-documentation/#responses_8","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <pre><code>{\n\u00a0 \u00a0 \"success\": true,\n\u00a0 \u00a0 \"data\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"attendance\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 23,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"date\": \"2025-03-03\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_in\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_out\": \"15:04:16\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_start\": \"15:04:13\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_end\": \"15:04:15\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"last_action\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n}\n</code></pre></li> <li>Employee Not Found <code>404 Not Found</code></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"api-documentation/#5-get-an-attendance-by-id","title":"5. Get an attendance by id","text":""},{"location":"api-documentation/#endpoint_9","title":"Endpoint :","text":"<p>this endpoint returns an attendance entry by its <code>id</code> <pre><code>GET /attendance/{att_id}\n</code></pre> - <code>att_id</code> : the id of the attendance we want to fetch</p>"},{"location":"api-documentation/#responses_9","title":"Responses :","text":"<ol> <li>Success <code>200 OK</code> <pre><code>{\n\u00a0 \u00a0 \"success\": true,\n\u00a0 \u00a0 \"data\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \"attendance\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"id\": 21,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"employee_id\": 3,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"date\": \"2025-02-28\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_in\": \"11:01:10\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"check_out\": \"11:55:12\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_start\": \"11:54:47\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"break_end\": \"11:55:02\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"last_action\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"created_at\": null,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"updated_at\": null\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n}\n</code></pre></li> <li>Attendance Not Found <code>404 Not Found</code></li> <li>Server Error <code>500 Internal Server Error</code></li> </ol>"},{"location":"endpoints/","title":"Format specification","text":"<p>All requests that have a body require a content-type of multipart/form-data , and the response of all requests (with or without a body) have content type application/json , if an endpoint doesn't follow this format then it will be specified.</p>"},{"location":"endpoints/#endpoints","title":"Endpoints","text":""},{"location":"endpoints/#employee-endpoints","title":"Employee Endpoints","text":"endpoint method body description /employee GET / get a full list of employees /employee/{id} GET / get an employee by id /employee POST name : Stringsalary : Float create an employee /employee/{id} POST name : Stringsalary : Float update an employee /employee/{id} DELETE / delete an employee"},{"location":"endpoints/#attendance-endpoints","title":"Attendance Endpoints","text":"endpoint method body description /attendance/{id} GET / get an attendance by id /attendance/{emp_id}/month/{yyyy}-{mm} GET / get the attendance report of an employee for a given month /attendance/{emp_id}/month/{yyyy}-{mm}-{dd} GET / get the attendance entry of an employee at a given day /attendance POST                  date : Date                 employee_id : Int                 check_in : Time              create an attendance /attendance/{id} POST                  field : Enum                 time : Time              update an attendance entry"},{"location":"endpoints/#field-details","title":"Field details","text":"<ul> <li>POST /attendance/{id}    <code>field : Enum('check_in','check_out','break_start','break_end')</code></li> </ul>"},{"location":"endpoints/#responses","title":"Responses","text":""},{"location":"endpoints/#400-bad-request","title":"400 Bad Request","text":"<p>Validation error occurs when the request body contains invalid data either by sending fileds containing with incorrect data types or the data itself is incorrect, for example : trying to update an attendance field <code>break_start</code> to <code>08:30:22</code> while <code>check_in</code> is set to <code>09:01:22</code>, here <code>break_start</code> can't be set to be before <code>check_in</code> which results in a bad-request response . <pre><code>{\n\n\u00a0 \u00a0 \"success\": false,\n\n\u00a0 \u00a0 \"message\": \"Validation failed\",\n\n\u00a0 \u00a0 \"errors\": \"Valeur invalide pour '${fieldName}'.\"\n\n}\n</code></pre> <code>${fieldName}</code> is the name of the field on which validation failed </p>"},{"location":"endpoints/#500-internal-server-error","title":"500 Internal Server Error","text":"<p>This type of error occurs because of run-time exceptions, all exceptions must be caught and an appropriate user-friendly message be returned , as for lower layers like service layers exceptions must be thrown to be handled by the upper layers. <pre><code>{\n    \"success\": false,\n    \"message\": {error message}\n}\n</code></pre></p>"}]}